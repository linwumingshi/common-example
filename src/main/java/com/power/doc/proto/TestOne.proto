syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloWorld;

/**
 * 消息类型枚举。
 * 定义了可以使用的不同类型的消息。
 */
enum MessageType {
  /** 未指定的消息类型。 */
  TYPE_UNSPECIFIED = 0;

  /** 普通消息类型。 */
  TYPE_NORMAL = 1;

  /** 特殊消息类型。 */
  TYPE_SPECIAL = 2;
}

/**
 * 问候服务定义。
 * 该服务提供不同的 RPC 方法来发送和接收问候。
 */
service Greeter {
  /**
   * 发送问候。
   * 该方法接收一个 HelloRequest 并返回一个 HelloReply。
   */
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  /**
   * 发送一系列问候。
   * 该方法接收一个 HelloRequest 并返回一个 HelloReply 流。
   */
  rpc SayHelloServerStreaming (HelloRequest) returns (stream HelloReply) {}

  /**
   * 接收一系列名称并发送一个问候。
   * 该方法接收一个 HelloRequest 流并返回一个 HelloReply。
   */
  rpc SayHelloClientStreaming (stream HelloRequest) returns (HelloReply) {}

  /**
   * 发送和接收一系列消息。
   * 该方法接收一个 HelloRequest 流并返回一个 HelloReply 流。
   */
  rpc SayHelloBidirectionalStreaming (stream HelloRequest) returns (stream HelloReply) {}
}

/**
 * 包含用户姓名的请求消息。
 * 该消息包含多个字段，用于提供用户信息。
 */
message HelloRequest {
  /** 用户的姓名。 */
  string name = 1;

  /** 用户的年龄。 */
  optional int32 age = 2;

  /** 用户的爱好。 */
  repeated string hobbies = 3;

  /** 用户的其他属性。 */
  map<string, string> properties = 4;

  /** 包含额外信息的嵌套消息。 */
  NestedMessage nested_message = 5;

  /** 消息类型。 */
  MessageType type = 6;
}

/**
 * 嵌套消息定义。
 * 该消息提供额外的嵌套信息。
 */
message NestedMessage {
  /** 嵌套消息中的字段。 */
  string nested_field = 1;

  /** 包含数字列表的重复字段。 */
  repeated int32 numbers = 2;

  /** 包含结果的映射。 */
  map<string, Result> results_map = 3;
}

/**
 * 包含问候的响应消息。
 * 该消息包含问候服务的响应详细信息。
 */
message HelloReply {
  /** 问候消息。 */
  string message = 1;

  /** 包含结果的重复字段。 */
  repeated Result results = 2;

  /** 响应的附加元数据。 */
  map<string, string> metadata = 3;
}

/**
 * 嵌套消息定义。
 * 该消息表示一个包含名称和代码的结果。
 */
message Result {
  /** 结果的名称。 */
  string result_name = 1;

  /** 结果的代码。 */
  int32 result_code = 2;
}
